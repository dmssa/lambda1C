// Пример:
// Н = Наборы.НовыйНабор(ЭтаФорма);
// Р = Наборы.ЗадатьДанные(Н, Массив)
//           .Отбор(Н, "Элемент>50;")                                              // Выбирает элементы > 50
//           .Сортировать(Н, "?(Больше = Меньше, 0, ?(Больше > Меньше, 1, -1));")
//           .Первые(Н, 10)                                                        // Выбирает первые 10 элементов
//           .Выбрать(Н, "Элемент-Разница;", Новый Структура("Разница", 20))       // Отнимает у каждого элемента 20
//           .Развернуть(Н)                                                        // Изменяет порядок
//           .ДляКаждого(Н, "Сообщить(Элемент);")
//           .ВМассив(Н);                                                          // Получает итоговый массив

//Параметр Контекст - окружение, в котором определены функции
//  ЭтаФорма - для модуля формы,
//  ЭтотОбъект.Ссылка.ПолучитьОбъект() - для модуля объекта

//Параметр ИмяФункции - задаётся функцией Контекста или кодом
//  Объявление функции:
//  Функция ИмяФункции(Элемент, Индекс, Массив, Результат, Набор)
//  КонецФункции
//  Код должен оканчиваться на ; или содержать ;
//  Количество и значения параметров можно указать при использовании



#Область ФункцииПоследовательности 
Функция НовыйНабор(Контекст = Неопределено) Экспорт
	Набор = Новый Структура("Данные
                         | , ИмяЭлемента
                         | , Функции
                         | , Контекст
                         | , Результат
                         | , ТипДанных
                         | , Параметры
                         | ");
    Набор.Данные = Новый Массив();
    Набор.Функции = Новый Массив();                                  
    Набор.Контекст = Контекст;
    Набор.ИмяЭлемента = "Элемент";
    Возврат Набор;	
КонецФункции

Функция ЭтоИмяФункции(Текст)
    Если СтрНайти(Текст, ";", НаправлениеПоиска.СКонца)>0 Тогда
    	Возврат Ложь;
    КонецЕсли; 	
    Если СтрДлина(Текст) = 0 Тогда
    	Возврат Ложь;
    КонецЕсли; 
    Возврат Истина;
КонецФункции

Функция ЗадатьДанные(Набор, Коллекция, ИмяЭлемента = Неопределено) Экспорт
    Если ЗначениеЗаполнено(ИмяЭлемента) Тогда
        Набор.ИмяЭлемента = ИмяЭлемента;
    КонецЕсли; 

    Набор.Данные = Коллекция;
    Набор.ТипДанных = ТипЗнч(Коллекция);
    Если Набор.ТипДанных <> Тип("Массив") Тогда
        ВМассив(Набор);
    КонецЕсли; 


    Возврат Наборы;	
КонецФункции

#Область ФункцииВозращающиеДанные
 
//  Возвращает результаты применения функций в массиве
Функция ВМассив(Набор) Экспорт
    Набор.Результат = Новый Массив();
    
    ДляКаждого(Набор, "Результаты.Добавить(" + Набор.ИмяЭлемента + ");", , Ложь);
    
    Набор.Данные = Набор.Результат;
    Возврат Набор.Результат;	
КонецФункции

//  Возвращает результаты применения функций в строке
Функция ВСтроку(Набор, Разделитель = ",") Экспорт
    Набор.Результат = "";
    ДляКаждого(Набор
        , "Результаты = ?(ПустаяСтрока(Результаты), Строка(" + Набор.ИмяЭлемента + "), Результаты + """ 
            + Разделитель 
            + """ + Строка(" 
            + Набор.ИмяЭлемента 
            + "));"
        , , Ложь);
    
    Набор.Данные = Новый Массив(1);
    Набор.Данные[0] = Набор.Результат;
    
    Возврат Набор.Результат;	
КонецФункции
//  Возвращает результаты применения функций в исходном типе
Функция ВИсходныйТип(Набор) Экспорт
    
    Если Набор.ТипДанных = Тип("Массив") Тогда
    	Возврат ВМассив(Набор);
    ИначеЕсли Набор.ТипДанных = Тип("Соответствие") 
        ИЛИ Набор.ТипДанных = Тип("Структура") Тогда 
        
        Набор.Результат = Новый(Строка(Набор.ТипДанных));
        ДляКаждого(Набор
            , "Результаты.Вставить(" 
                + Набор.ИмяЭлемента 
                + ".Ключ, " 
                + Набор.ИмяЭлемента 
                + ".Значение);"
            , , Ложь);
        // ??? Набор.Данные = Набор.Результат;
        Возврат Набор.Результат;	
    Иначе
        ВызватьИсключение("Преобразование к типу не определено");
    КонецЕсли; 
    
КонецФункции

//  Возвращает количество элементов
Функция Количество(Набор) Экспорт
    Набор.Результат = 0;
    
    ДляКаждого(Набор, "Результаты = Результаты + 1;", , Ложь);
    
    Набор.Данные = Новый Массив(1);
    Набор.Данные[0] = Набор.Результат;

    Возврат Набор.Результат;	
КонецФункции

#КонецОбласти 
 

Функция Первые(Набор, Количество) Экспорт
    Запись = Новый Структура("Действие, Функция, Количество, Вызвать", "Первые", "", Количество); 
    Запись.Вызвать = Ложь;
    Набор.Функции.Добавить(Запись);
    Возврат Наборы;	
КонецФункции

Процедура б_Сортировка(Массив, НижнийПредел, ВерхнийПредел, ПараметрСравнения)
    Н = НижнийПредел;
    В = ВерхнийПредел;
    Ср = Массив[Цел((Н + В) / 2)];
    Пока Н <= В Цикл
    	Пока б_Сравнить(Массив[Н], Ср, ПараметрСравнения) = -1 Цикл
        	Н = Н + 1;	
        КонецЦикла; 	
    	Пока б_Сравнить(Массив[В], Ср, ПараметрСравнения) =  1 Цикл
        	В = В - 1;	
        КонецЦикла;
        Если Н <= В Тогда
        	Если Н < В Тогда
            	Т = Массив[Н];
                Массив[Н] = Массив[В];
                Массив[В] = Т;
            КонецЕсли;
            Н = Н + 1;
            В = В - 1; 
        КонецЕсли;  	
    КонецЦикла;
    Если Н < ВерхнийПредел Тогда
    	б_Сортировка(Массив, Н, ВерхнийПредел, ПараметрСравнения)
    КонецЕсли;  
    Если НижнийПредел < В Тогда
    	б_Сортировка(Массив, НижнийПредел, В, ПараметрСравнения)
    КонецЕсли;  
КонецПроцедуры
Функция б_Сравнить(Больше, Меньше, Параметр)
    Результат = Ложь;
    Контекст = Параметр.Контекст;
    Выполнить(Параметр.Команда);
    Возврат Результат;
КонецФункции
Функция Сортировать(Набор, ИмяФункцииБольшеМеньше = "?(Больше = Меньше, 0, ?(Больше > Меньше, 1, -1));") Экспорт
	ВМассив(Набор);
    НижняяГраница = 0;
    ВерхняяГраница = Набор.Данные.ВГраница();
    КомандаСравнения = "Результат = ";
    Если ЭтоИмяФункции(ИмяФункцииБольшеМеньше) Тогда
        Если Набор.Контекст <> Неопределено И Набор.Контекст <> "" Тогда
        	КомандаСравнения = КомандаСравнения + "Контекст.";
        КонецЕсли; 
        КомандаСравнения = КомандаСравнения + ИмяФункцииБольшеМеньше + "(Больше, Меньше);"   
    Иначе
        КомандаСравнения = КомандаСравнения + ИмяФункцииБольшеМеньше;
    КонецЕсли;
    ПараметрСравнения = Новый Структура("Команда, Контекст", КомандаСравнения, Набор.Контекст);   
    б_Сортировка(Набор.Данные, НижняяГраница, ВерхняяГраница, ПараметрСравнения);
    
    Возврат Наборы;	
КонецФункции
 

Функция Отбор(Набор, ИмяФункции, Параметры = Неопределено) Экспорт
    Запись = Новый Структура("Действие, Функция,    Параметры, Вызвать"
                           , "Отбор",   ИмяФункции, Параметры, ЭтоИмяФункции(ИмяФункции)); 
    Набор.Функции.Добавить(Запись);
    Возврат Наборы;	
КонецФункции
//  Применяет к коллекции функцию, сохраняет результат   
Функция Выбрать(Набор, ИмяФункции, Параметры = Неопределено) Экспорт
    Запись = Новый Структура("Действие, Функция,    Параметры, Вызвать"
                           , "Выбрать", ИмяФункции, Параметры, ЭтоИмяФункции(ИмяФункции)); 
    Набор.Функции.Добавить(Запись);
    Возврат Наборы;	
КонецФункции
//  Применяет к коллекции функцию, сохранение результата зависит от вызывающего кода
Функция ДляКаждого(Набор, ИмяФункции, Параметры = Неопределено, ИспользоватьКонтекст = Истина) Экспорт
    ТекстФункции = ИмяФункции;
    Прм = ПолучитьПараметры(Новый Структура("Параметры", Параметры), "Набор.Параметры");
    Если ЭтоИмяФункции(ИмяФункции) Тогда
//    	ТекстФункции = ТекстФункции + "(" + Набор.ИмяЭлемента + ", Индекс, Массив, Результат);";
       	Если ИспользоватьКонтекст Тогда
        	ТекстФункции = "Контекст." + ТекстФункции;
        КонецЕсли;
        ТекстФункции = Прм.Перем + ТекстФункции + "(" + Прм.Парам + ");";
        Набор.Параметры = Параметры;
    Иначе
        ТекстФункции = Прм.Перем + ТекстФункции;  
    КонецЕсли;
    
    Индекс = 0;
    Для каждого Элемент Из Набор.Данные Цикл
        Если ОбработкаЭлемента(Набор, Элемент, Индекс, ТекстФункции) Тогда
        	Прервать;
        КонецЕсли;   
        Индекс = Индекс + 1;  
    КонецЦикла;
    Набор.Параметры = Неопределено;
    Набор.Функции.Очистить(); 
    
    Возврат Наборы;	
КонецФункции

//  Разворачивает Набор.Данные
//  Возвращает объект модуля
Функция Развернуть(Набор) Экспорт

    Набор.Результат = Новый Массив();
    Для Индекс = 0 По Набор.Данные.ВГраница() Цикл
        Элемент = Набор.Данные[Индекс];
        Если ОбработкаЭлемента(Набор
                             , Элемент
                             , Индекс
                             , "Результаты.Вставить(0, Элемент);")  Тогда
            Прервать;
        КонецЕсли;
    КонецЦикла; 	
    
    Набор.Функции.Очистить(); 
    Набор.Данные = Набор.Результат;
    	
    Возврат Наборы;	
КонецФункции

Функция ПолучитьПараметры(Задача, ПутьКДанным)
    Результат = Новый Структура("Перем, Парам", "", "");
    Параметры = "";
    Если Не Задача.Свойство("Параметры", Параметры) Тогда
    	Возврат Результат;
    КонецЕсли; 
    Если Параметры = Неопределено Тогда
        Результат.Парам = "Элемент, Индекс, Массив, Результат, Набор";
    ИначеЕсли ТипЗнч(Параметры) = Тип("Строка") Тогда
        Результат.Парам = Параметры;
    Иначе  // Если ТипЗнч(Параметры) = Тип("Структура") Тогда
        ТекстПарам = "";
        ТекстПерем = "";
        Для каждого КлЗнч Из Параметры Цикл
            Если КлЗнч.Значение <> Неопределено Тогда
                ТекстПерем = ТекстПерем + КлЗнч.Ключ + "=" + ПутьКДанным + "[""" + КлЗнч.Ключ + """];";
            КонецЕсли;
            ТекстПарам = ТекстПарам + ?(ТекстПарам = "", "", ",") + КлЗнч.Ключ; 
        КонецЦикла;
        Результат.Парам = ТекстПарам;
        Результат.Перем = ТекстПерем;
    КонецЕсли;
    Возврат Результат;		
КонецФункции

Функция ОбработкаЭлемента(Набор, Элемент, Индекс, __ОбработчикРезультата)
	__Отбор              = Истина;
    __ПрерватьВыполнение = Ложь;
    __РезультатТекст     = "Результат = ";
    Результат            = Неопределено;
    Результаты           = Набор.Результат;
    Контекст             = Набор.Контекст;
    Массив               = Набор.Данные;
    
    Для каждого __Задача Из Набор.Функции Цикл
        
        __Прм = ПолучитьПараметры(__Задача, "__Задача.Параметры");
        Если __Задача.Вызвать Тогда
            __Строка = __РезультатТекст ;
            Если Контекст <> "" И Контекст <> Неопределено  Тогда
                __Строка = __Строка + "Контекст.";
            КонецЕсли;
            __Строка = __Прм.Перем + __Строка + __Задача.Функция + "(" + __Прм.Парам + ");";
        Иначе
            __Строка = __Прм.Перем + __РезультатТекст + __Задача.Функция;
        КонецЕсли; 
        
        //  Обработка результата функциями 
        Если __Задача.Действие = "Отбор" Тогда
            Выполнить(__Строка);
            __Отбор = Булево(Результат);
            Если Не __Отбор Тогда
            	Возврат __ПрерватьВыполнение;
            КонецЕсли; 
        ИначеЕсли __Задача.Действие = "Первые"  Тогда
            Если Индекс >= __Задача.Количество Тогда
            	__ПрерватьВыполнение = Истина;
                Возврат __ПрерватьВыполнение;
            КонецЕсли; 
        ИначеЕсли __Задача.Действие = "Выбрать" Тогда 
            Выполнить(__Строка);
            Элемент = Результат;
        КонецЕсли; 
        
    КонецЦикла;
    Выполнить(__ОбработчикРезультата);
    Набор.Результат = Результаты;
    Возврат __ПрерватьВыполнение;
КонецФункции
 

Функция ОбработкаЭлемента1(Набор, Элемент, Индекс, __ОбработчикРезультата)
	__Отбор              = Истина;
    __ПрерватьВыполнение = Ложь;
    __РезультатТекст     = "Результат = ";
    Результат            = Неопределено;
    Результаты           = Набор.Результат;
    Контекст             = Набор.Контекст;
    Массив               = Набор.Данные;
    
    //  Восстановление названия у переменной
    
    Если Контекст <> "" И Контекст <> Неопределено  Тогда
    	__НачалоКоманды = __РезультатТекст + "Контекст.";
    КонецЕсли; 
    Для каждого __Задача Из Набор.Функции Цикл
        
        Если __Задача.Вызвать Тогда
            __Строка = __НачалоКоманды + __Задача.Функция + "(Элемент, Индекс, Массив, Результат);";
        Иначе
            __Строка = __РезультатТекст + __Задача.Функция;
        КонецЕсли; 
        
        //  Обработка результата функциями 
        Если __Задача.Действие = "Отбор" Тогда
            Выполнить(__Строка);
            __Отбор = Булево(Результат);
            Если Не __Отбор Тогда
            	Возврат __ПрерватьВыполнение;
            КонецЕсли; 
        ИначеЕсли __Задача.Действие = "Первые"  Тогда
            Если Индекс >= __Задача.Количество Тогда
            	__ПрерватьВыполнение = Истина;
                Возврат __ПрерватьВыполнение;
            КонецЕсли; 
        ИначеЕсли __Задача.Действие = "Выбрать" Тогда 
            Выполнить(__Строка);
            Элемент = Результат;
        КонецЕсли; 
        
    КонецЦикла;
    Выполнить(__ОбработчикРезультата);
    Набор.Результат = Результаты;
    Возврат __ПрерватьВыполнение;
КонецФункции
 
#КонецОбласти 
